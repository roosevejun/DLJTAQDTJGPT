<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">
    <!-- Resources                                                       -->
    <!-- =============================================================== -->
    <context:property-placeholder location="classpath:datasource.properties" ignore-unresolvable="true"/>
    <context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true" />
    <!-- =============================================================== -->
    <!-- Data Source                                                     -->
    <!-- =============================================================== -->
    <bean id="dataSource" class="org.logicalcobwebs.proxool.ProxoolDataSource">
        <property name="driver" value="${proxool.driver}" />
        <property name="driverUrl" value="${proxool.driverUrl}" />
        <property name="user" value="${proxool.user}" />
        <property name="password" value="${proxool.password}" />
        <property name="alias" value="${proxool.alias}" />
        <property name="maximumActiveTime" value="${proxool.maximumActiveTime}" />
        <property name="maximumConnectionCount" value="${proxool.maximumConnectionCount}" />
        <property name="minimumConnectionCount" value="${proxool.minimumConnectionCount}" />
        <property name="simultaneousBuildThrottle" value="${proxool.simultaneousBuildThrottle}" />
        <property name="houseKeepingTestSql" value="${proxool.houseKeepingTestSql}" />
        <!--<property name="houseKeepingSleepTime" value="${proxool.houseKeepingSleepTime}" />-->
        <property name="testBeforeUse" value="${proxool.testBeforeUse}" />
    </bean>

    <!--     -->
    <bean id="persistenceProvider" class="org.hibernate.ejb.HibernatePersistence"/>
    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="persistenceProvider" ref="persistenceProvider"/>
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="database" value="POSTGRESQL"/>
                <property name="databasePlatform" value="org.hibernate.dialect.PostgreSQL82Dialect"/>
                <property name="generateDdl" value="true"/>
                <property name="showSql" value="true"/>
            </bean>
        </property>
        <property name="jpaDialect" ref="jpaDialect"/>
        <property name="packagesToScan" value="com.tongtu.beans"/>
        <property name="loadTimeWeaver">
            <bean class="org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver"/>
        </property>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>
                <prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use.second.level.cache}</prop>
                <prop key="hibernate.cache.use_query_cache">${hibernate.cache.use.query.cache}</prop>
                <prop key="net.sf.ehcache.configurationResourceName">${net.sf.ehcache.configurationResourceName}</prop>
                <prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.temp.use_jdbc_metadata_defaults">${hibernate.temp.use_jdbc_metadata_defaults}
                </prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
                <prop key="hibernate.bytecode.use_reflection_optimizer">${hibernate.bytecode.use_reflection_optimizer}
                </prop>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                <prop key="hibernate.max_fetch_depth">${hibernate.max.fetch.depth}</prop>
                <prop key="javax.persistence.validation.mode">none</prop>
                <!--<prop key="hibernate.session_factory_name">mySessionFactory</prop>-->
            </props>
        </property>

    </bean>


    <bean id="transactionManager"
          class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <bean id="jpaDialect" class="org.springframework.orm.jpa.vendor.HibernateJpaDialect"/>
    <!-- 定义事务管理器（声明式的事务）     -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>

            <tx:method name="get*" propagation="REQUIRED"
                       read-only="true"/>
            <tx:method name="load*" propagation="REQUIRED"
                       read-only="true"/>
            <tx:method name="find*" propagation="REQUIRED"
                       read-only="true"/>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="remove*" propagation="REQUIRED"/>
            <tx:method name="add*" propagation="REQUIRED"/>

            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>
    <aop:config proxy-target-class="true">
        <aop:pointcut id="interceptorPointCuts"
                      expression="execution(* com.tongtu..*Service*.*(..))"/>
        <aop:pointcut id="interceptorPointCutsDao"
                      expression="execution(* *.*..*Dao*.*(..))"/>
        <aop:advisor advice-ref="txAdvice"
                     pointcut-ref="interceptorPointCutsDao"/>
    </aop:config>
</beans>